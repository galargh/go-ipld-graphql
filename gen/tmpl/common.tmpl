// Code generated by github.com/ipld/go-ipld-prime/schema/gen/graphql/server, DO NOT EDIT.

package {{ .Package }}

import (
    "context"
    "fmt"

    "github.com/graphql-go/graphql"
    "github.com/graphql-go/graphql/language/ast"
    ipld "github.com/ipld/go-ipld-prime"
    cidlink "github.com/ipld/go-ipld-prime/linking/cid"
    "{{ .TSPackage }}"
)

type nodeLoader func(ctx context.Context, cid cidlink.Link, builder ipld.NodeBuilder) (ipld.Node, error)
const nodeLoaderCtxKey = "NodeLoader"

var errNotNode = fmt.Errorf("Not IPLD Node")
var errInvalidLoader = fmt.Errorf("Invalid Loader Provided")
var errInvalidLink = fmt.Errorf("Invalid link")

func resolve_map_at(p graphql.ResolveParams) (interface{}, error) {
    ts, ok := p.Source.(ipld.Node)
    if !ok {
        return nil, errNotNode
    }
    arg := p.Args["key"]

    switch ta := arg.(type) {
    case ipld.Node:
        return ts.LookupByNode(ta)
    case string:
        return ts.LookupByString(ta)
    default:
        return nil, fmt.Errorf("unknown key type: %T", arg)
    }
}
