func {{ .t.Name }}__{{ .field.Name}}__resolve(p graphql.ResolveParams) (interface{}, error) {
    ts, ok := p.Source.({{ TypePackage }}.{{ .t | TypeSymbol }})
    if !ok {
        return nil, fmt.Errorf(errUnexpectedType, p.Source, "{{ TypePackage }}.{{ .t | TypeSymbol }}")
    }
    {{ if .field.IsMaybe }}
    f := ts.Field{{ .field.Name }}()
    if f.Exists() {
        {{ if .field.Type | IsBuiltIn }}
        return f.Must().As{{ .field.Type | TypeKind }}()
        {{ else if (and (eq .field.Type.TypeKind.String "link") (ne (.field.Type | LinkTarget) "graphql.ID")) }}
        targetCid := ts.Field{{ .field.Name }}().Must().Link()
        {{ .field.Type | ReturnTarget "targetCid" }}
        {{ else }}
        return f.Must(), nil
        {{ end }}
    } else {
        return nil, nil
    }
    {{ else if .field.Type | IsBuiltIn }}
    return ts.Field{{ .field.Name }}().As{{ .field.Type | TypeKind }}()
    {{ else if (and (eq .field.Type.TypeKind.String "link") (ne (.field.Type | LinkTarget) "graphql.ID")) }}
    targetCid := ts.Field{{ .field.Name }}().Link()
    {{ .field.Type | ReturnTarget "targetCid" }}
    {{ else }}
    return ts.Field{{ .field.Name }}(), nil
    {{ end }}
}
